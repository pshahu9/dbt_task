{% macro iceberg_snapshot_merge_sql(materialization_overrides, target, source, insert_cols) %}

  {%- set unique_key = config.get('unique_key') %}
  {%- set insert_cols_csv = insert_cols | join(', ') -%}

  -- Use MERGE INTO to perform the merge operation
  MERGE INTO {{ target }} t
  USING {{ source }} s
  ON t.{{ unique_key }} = s.{{ unique_key }}
  WHEN MATCHED THEN
    UPDATE SET
      {% for col in insert_cols %}
        {% if col != unique_key %}
          t.{{ col }} = s.{{ col }},
        {% endif %}
      {% endfor %}
      t.dbt_updated_at = CURRENT_TIMESTAMP()  -- Update dbt_updated_at in target
  WHEN NOT MATCHED THEN
    INSERT (
      {{ insert_cols_csv }},
      dbt_updated_at
    ) VALUES (
      {% for col in insert_cols %}
        {% if col != unique_key %}
          s.{{ col }},
        {% endif %}
      {% endfor %}
      CURRENT_TIMESTAMP()  -- Insert dbt_updated_at in source
    )
  {{- '' if not materialization_overrides else materialization_overrides | indent(2) }}
  ;

{% endmacro %}

{% materialization snapshot_iceberg, default %}
  {%- set config = model['config'] -%}
  {%- set target_table = model.get('alias', model.get('name')) -%}
  {%- set external_volume = config.get('external_volume') %}
  {%- set base_location = config.get('base_location') %}
  {%- set catalog = config.get('catalog') %}
  {%- set strategy_name = config.get('strategy') -%}
  {%- set unique_key = config.get('unique_key') -%}

  -- grab current table grants config for comparison later on
  {%- set grant_config = config.get('grants') -%}

  {% set target_relation_exists, target_relation = get_or_create_relation(
          database=model.database,
          schema=model.schema,
          identifier=target_table,
          type='table') -%}

  {%- if not target_relation.is_table -%}
    {% do exceptions.relation_wrong_type(target_relation, 'table') %}
  {%- endif -%}

  {{ run_hooks(pre_hooks, inside_transaction=False) }}
  {{ run_hooks(pre_hooks, inside_transaction=True) }}

  {% set strategy_macro = strategy_dispatch(strategy_name) %}
  {% set strategy = strategy_macro(model, "snapshotted_data", "source_data", config, target_relation_exists) %}

  {% if not target_relation_exists %}
    {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}
    {% set final_sql = create_iceberg_table_as(False, target_relation, build_sql, external_volume=external_volume, catalog=catalog, base_location=base_location) %}
  {% else %}
    {{ adapter.valid_snapshot_target(target_relation) }}

    {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}

    -- this may no-op if the database does not require column expansion
    {% do adapter.expand_target_column_types(from_relation=staging_table, to_relation=target_relation) %}

    {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)
                                 | rejectattr('name', 'equalto', 'dbt_change_type')
                                 | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')
                                 | rejectattr('name', 'equalto', 'dbt_unique_key')
                                 | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')
                                 | list %}
    {% do create_columns(target_relation, missing_columns) %}

    {% set source_columns = adapter.get_columns_in_relation(staging_table)
                                 | rejectattr('name', 'equalto', 'dbt_change_type')
                                 | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')
                                 | rejectattr('name', 'equalto', 'dbt_unique_key')
                                 | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')
                                 | list %}
    {% set quoted_source_columns = [] %}
    {% for column in source_columns %}
      {% do quoted_source_columns.append(adapter.quote(column.name)) %}
    {% endfor %}
    {% set final_sql = iceberg_snapshot_merge_sql(
          target = target_relation,
          source = staging_table,
          insert_cols = quoted_source_columns
       )
    %}
  {% endif %}

  {% call statement('main') %}
    {{ final_sql }}
  {% endcall %}

  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}
  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}
  
  {% do persist_docs(target_relation, model) %}

  {% if not target_relation_exists %}
    {% do create_indexes(target_relation) %}
  {% endif %}

  {{ run_hooks(post_hooks, inside_transaction=True) }}
  {{ adapter.commit() }}

  {% if staging_table is defined %}
    {% do post_snapshot(staging_table) %}
  {% endif %}

  {{ run_hooks(post_hooks, inside_transaction=False) }}

  {{ return({'relations': [target_relation]}) }}
{% endmaterialization %}
