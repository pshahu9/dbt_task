{% materialization iceberg_dynamic, adapter='default', supported_languages=['sql', 'python'] %}
{%- set identifier = model['alias'] -%}
{% set alias_config = config(alias) %}
{% set tags_config = config(tags) %}
{% set external_volume =  config.require('external_volume',) %}
{% set catalog = config.require('catalog',)%}
{% set base_location = config.get('base_location', default='')%}
{%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}
{%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database, type='table') -%}    
{{- run_hooks(pre_hooks) -}}
{% if old_relation is not none and not old_relation.is_table %}
    {{ drop_relation_if_exists(old_relation) }}
    {{ print(["Dropping existing relation"]) }}
{% endif %}
    {% call statement('main') %}
        {{ create_iceberg_table(target_relation, sql, external_volume, catalog, base_location) }}
    {% endcall %}
{{- run_hooks(post_hooks) -}}
    {{ print([sql]) }}
	{% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}
    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}
    {% do persist_docs(target_relation, model) %}
    {% do unset_query_tag(original_query_tag) %}
    {{ return({'relations': [target_relation]}) }}
{% endmaterialization %}
 
{% macro create_iceberg_table(table_name, sql, external_volume, catalog, base_location) %}
    CREATE OR REPLACE ICEBERG TABLE {{ table_name }}
    EXTERNAL_VOLUME = '{{ external_volume }}'
    CATALOG = '{{ catalog }}'
    BASE_LOCATION = '{{ base_location }}'  
    AS (
        {{ sql }}
    )
{% endmacro %}
