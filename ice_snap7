{% macro create_iceberg_table_as(materialization_overrides, target_relation, select_sql, external_volume, base_location, catalog) %}
  {% set schema = target_relation.schema %}
  {% set table = target_relation.identifier %}
  
  -- Drop the table if it already exists
  DROP TABLE IF EXISTS {{ target_relation }} CASCADE;

  -- Create the Iceberg table
  CREATE TABLE {{ target_relation }} (
    {{ select_sql }}
  );

  -- Set the table properties for Iceberg
  ALTER TABLE {{ target_relation }}
  SET LOCATION '{{ external_volume }}/{{ base_location }}/{{ catalog }}/{{ schema }}/{{ table }}'
  {{- '' if not materialization_overrides else materialization_overrides | indent(2) }}
  ;
{% endmacro %}

{% macro iceberg_snapshot_merge_sql(materialization_overrides, target, source, insert_cols) %}
  {% set target_columns = adapter.get_columns_in_relation(target) %}
  {% set target_column_names = target_columns | map(attribute='name') %}
  {% set target_columns_sql = target_column_names | join(', ') %}

  -- Use MERGE INTO to perform the merge operation
  MERGE INTO {{ target }} t
  USING {{ source }} s
  ON t.{{ config.get('unique_key') }} = s.{{ config.get('unique_key') }}
  WHEN MATCHED THEN
    UPDATE SET
      {% for col in insert_cols %}
        t.{{ col }} = s.{{ col }},
      {% endfor %}
      t.dbt_updated_at = CURRENT_TIMESTAMP()
  WHEN NOT MATCHED THEN
    INSERT (
      {{ target_columns_sql }},
      dbt_updated_at
    ) VALUES (
      {% for col in insert_cols %}
        s.{{ col }},
      {% endfor %}
      CURRENT_TIMESTAMP()
    )
  {{- '' if not materialization_overrides else materialization_overrides | indent(2) }}
  ;
{% endmacro %}
