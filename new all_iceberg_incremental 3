{% materialization incremental_multi_strategy_iceberg, adapter='snowflake' %}

  {% set original_query_tag = set_query_tag() %}

  {# Set vars #}
  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}
  {% set full_refresh_mode = should_full_refresh() %}
  {% set language = model['language'] %}
  {% set target_relation = this %}
  {% set existing_relation = load_relation(this) %}
  {% set unique_key = config.get('unique_key') %}
  {% set external_volume = config.require('external_volume') %}
  {% set catalog = config.require('catalog') %}
  {% set base_location = config.get('base_location', default='') %}
  {% set cluster_by_column = config.get('cluster_by_column', default='') %}
  {% set copy_grants = config.get('copy_grants', default='') %}
  {% set comment = config.get('comment') %}
  {% set change_tracking = config.get('change_tracking') %}
  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}
  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}
  {% set grant_config = config.get('grants') %}
  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}

  {{ run_hooks(pre_hooks) }}

  {% if existing_relation is none %}
    {%- call statement('main', language=language) -%}
      {{ create_iceberg_table(target_relation, compiled_code, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) }}
    {%- endcall -%}

  {% elif existing_relation.is_view %}
    {# Drop the view and recreate the table #}
    {{ log("Dropping relation " ~ target_relation ~ " because it is a view and this model is a table.") }}
    {% do adapter.drop_relation(existing_relation) %}
    {%- call statement('main', language=language) -%}
      {{ create_iceberg_table(target_relation, compiled_code, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) }}
    {%- endcall -%}
  {% elif full_refresh_mode %}
    {%- call statement('main', language=language) -%}
      {{ create_iceberg_table(target_relation, compiled_code, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) }}
    {%- endcall -%}

  {% else %}
    {# Create the temp relation #}
    {% set tmp_relation_type = 'table' %}
    {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}
    {%- call statement('create_tmp_relation', language=language) -%}
      {{ create_table_as(True, tmp_relation, compiled_code, language) }}
    {%- endcall -%}

    {% do adapter.expand_target_column_types(from_relation=tmp_relation, to_relation=target_relation) %}

    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}
    {% set update_columns = dest_columns %}
    {% set insert_columns = dest_columns %}
    {% set update_condition = 't.' ~ unique_key ~ ' = s.' ~ unique_key %}
    {% set insert_values = dest_columns | map(attribute='name') | join(', ') %}
    
    {% if incremental_strategy == 'merge' %}
      {% set merge_sql %}
        MERGE INTO {{ target_relation }} AS t
        USING {{ tmp_relation }} AS s
        ON {{ update_condition }}
        WHEN MATCHED AND {{ update_condition }} THEN UPDATE SET
          {% for column in update_columns %}
            {{ "t." ~ column.name ~ " = s." ~ column.name }}{% if not loop.last %},{% endif %}
          {% endfor %}
        WHEN NOT MATCHED THEN INSERT ({{ insert_values }})
          VALUES ({{ insert_values | replace(',', ', s.') }})
        ;
      {% endset %}

      {%- call statement('main') -%}
        {{ merge_sql }}
      {%- endcall -%}
    {% elif incremental_strategy == 'append' %}
      {% set insert_sql %}
        INSERT INTO {{ target_relation }} ({{ insert_values }})
        SELECT {{ insert_values }}
        FROM {{ tmp_relation }}
      {% endset %}

      {%- call statement('main') -%}
        {{ insert_sql }}
      {%- endcall -%}
    {% elif incremental_strategy == 'delete+insert' %}
      {% set delete_sql %}
        DELETE FROM {{ target_relation }}
        WHERE {{ unique_key }} IN (SELECT {{ unique_key }} FROM {{ tmp_relation }})
      {% endset %}

      {%- call statement('delete_records') -%}
        {{ delete_sql }}
      {%- endcall -%}

      {% set insert_sql %}
        INSERT INTO {{ target_relation }}
        SELECT *
        FROM {{ tmp_relation }}
        WHERE {{ unique_key }} NOT IN (SELECT {{ unique_key }} FROM {{ target_relation }})
      {% endset %}

      {%- call statement('insert_new_records') -%}
        {{ insert_sql }}
      {%- endcall -%}
    {% else %}
      {% do exceptions.raise_compiler_error("Unsupported incremental strategy: " ~ incremental_strategy) %}
    {% endif %}
  {% endif %}

  {% do drop_relation_if_exists(tmp_relation) %}
  {{ run_hooks(post_hooks) }}

  {% set target_relation = target_relation.incorporate(type='table') %}
  {% set should_revoke = should_revoke(existing_relation.is_table, full_refresh_mode) %}
  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}
  {% do persist_docs(target_relation, model) %}

  {% do unset_query_tag(original_query_tag) %}
  {{ return({'relations': [target_relation]}) }}

{%- endmaterialization %}
