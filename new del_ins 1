{% macro create_iceberg_table(table_name, sql, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) %}
    CREATE OR REPLACE ICEBERG TABLE {{ table_name }}
	EXTERNAL_VOLUME = '{{ external_volume }}'
    CATALOG = '{{ catalog }}'
    BASE_LOCATION = '{{ base_location }}'
	{%- if cluster_by_column %}
    CLUSTER BY ({{ cluster_by_column }})
    {%- endif %}
	{%- if copy_grants %}
    COPY GRANTS
    {%- endif %}
	{%- if comment %}
    COMMENT '{{ comment }}'
    {%- endif %}
	{%- if change_tracking %}
    CHANGE_TRACKING
    {%- endif %}
    AS (
        {{ sql }}
    )
{% endmacro %}

{% materialization incremental_delete_insert_iceberg, adapter='snowflake' %}

  {% set original_query_tag = set_query_tag() %}

  {#-- Set vars --#}
  {%- set full_refresh_mode = (should_full_refresh()) -%}
  {%- set language = model['language'] -%}
  {% set target_relation = this %}
  {% set existing_relation = load_relation(this) %}

  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}
  {%- set unique_key = config.get('unique_key') -%}
  {%- set external_volume = config.require('external_volume') %}
  {%- set catalog = config.require('catalog') %}
  {%- set base_location = config.get('base_location', default='') %}
  {%- set cluster_by_column = config.get('cluster_by_column', default='') %}
  {%- set copy_grants = config.get('copy_grants', default='') %}
  {%- set comment = config.get('comment') %}
  {%- set change_tracking = config.get('change_tracking') %}
  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}
  {% if incremental_strategy != 'delete+insert' %}
    {% do exceptions.raise_compiler_error("incremental_delete_insert_iceberg materialization only supports 'delete+insert' strategy.") %}
  {% endif %}
  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}
  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}

  {% set grant_config = config.get('grants') %}

  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}

  {{ run_hooks(pre_hooks) }}

  {% if existing_relation is none %}
    {%- call statement('main', language=language) -%}
      {{ create_iceberg_table(target_relation, compiled_code, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) }}
    {%- endcall -%}

  {% elif existing_relation.is_view %}
    {#-- Can't overwrite a view with a table - we must drop --#}
    {{ log("Dropping relation " ~ target_relation ~ " because it is a view and this model is a table.") }}
    {% do adapter.drop_relation(existing_relation) %}
    {%- call statement('main', language=language) -%}
      {{ create_iceberg_table(target_relation, compiled_code, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) }}
    {%- endcall -%}
  {% elif full_refresh_mode %}
    {%- call statement('main', language=language) -%}
      {{ create_iceberg_table(target_relation, compiled_code, external_volume, catalog, base_location, cluster_by_column, copy_grants, comment, change_tracking) }}
    {%- endcall -%}

  {% else %}
    {#-- Create the temp relation, either as a view or as a temp table --#}
    {% if tmp_relation_type == 'view' %}
        {%- call statement('create_tmp_relation') -%}
          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}
        {%- endcall -%}
    {% else %}
        {%- call statement('create_tmp_relation', language=language) -%}
          {{ create_table_as(True, tmp_relation, compiled_code, language) }}
        {%- endcall -%}
    {% endif %}

    {% do adapter.expand_target_column_types(
           from_relation=tmp_relation,
           to_relation=target_relation) %}
    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}
    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}
    {% if not dest_columns %}
      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}
    {% endif %}

    {#-- Build the SQL for delete+insert operation --#}
    {% set delete_sql %}
      DELETE FROM {{ target_relation }}
      WHERE {{ unique_key }} IN (SELECT {{ unique_key }} FROM {{ tmp_relation }})
    {% endset %}

    {% set insert_columns = dest_columns %}
    {% set insert_values = dest_columns | map(attribute='name') | join(', ') %}
    
    {% set insert_sql %}
      INSERT INTO {{ target_relation }} ({{ insert_values }})
      SELECT {{ insert_values }}
      FROM {{ tmp_relation }}
      WHERE {{ unique_key }} NOT IN (SELECT {{ unique_key }} FROM {{ target_relation }})
    {% endset %}

    {%- call statement('main') -%}
      {{ delete_sql }}
      {{ insert_sql }}
    {%- endcall -%}
  {% endif %}

  {% do drop_relation_if_exists(tmp_relation) %}

  {{ run_hooks(post_hooks) }}

  {% set target_relation = target_relation.incorporate(type='table') %}

  {% set should_revoke =
   should_revoke(existing_relation.is_table, full_refresh_mode) %}
  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}

  {% do persist_docs(target_relation, model) %}

  {% do unset_query_tag(original_query_tag) %}

  {{ return({'relations': [target_relation]}) }}

{%- endmaterialization %}
